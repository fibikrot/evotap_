/**
 * EvoTap Game Launcher
 * –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç Core —Å–∏—Å—Ç–µ–º—ã
 */

const express = require('express');
const path = require('path');

console.log('üß¨ –ó–∞–ø—É—Å–∫ EvoTap...');

const app = express();
const PORT = process.env.PORT || 3002;

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, 'frontend')));

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –¥–µ–º–æ)
const players = new Map();
const organisms = new Map();

// –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const ERAS = [
    { id: 1, name: '–ö–ª–µ—Ç–æ—á–Ω–∞—è —ç—Ä–∞', emoji: 'ü¶†', unlockCost: 0, multiplier: 1 },
    { id: 2, name: '–ú–Ω–æ–≥–æ–∫–ª–µ—Ç–æ—á–Ω–∞—è —ç—Ä–∞', emoji: 'üêõ', unlockCost: 1000, multiplier: 2 },
    { id: 3, name: '–≠—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö', emoji: 'ü¶ï', unlockCost: 10000, multiplier: 5 },
    { id: 4, name: '–≠—Ä–∞ —Ä–∞–∑—É–º–∞', emoji: 'üß†', unlockCost: 100000, multiplier: 10 },
    { id: 5, name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —ç—Ä–∞', emoji: 'üöÄ', unlockCost: 1000000, multiplier: 20 }
];

const ORGANELLES = [
    { id: 1, name: '–ú–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏—è', cost: 100, multiplier: 2, description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –î–ù–ö' },
    { id: 2, name: '–†–∏–±–æ—Å–æ–º–∞', cost: 500, multiplier: 3, description: '–£—Å–∫–æ—Ä—è–µ—Ç —Å–∏–Ω—Ç–µ–∑ –±–µ–ª–∫–æ–≤' },
    { id: 3, name: '–Ø–¥—Ä–æ', cost: 2000, multiplier: 5, description: '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫–ª–µ—Ç–æ—á–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã' }
];

// –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞
function getPlayer(userId) {
    if (!players.has(userId)) {
        players.set(userId, {
            id: userId,
            dna: 0,
            totalClicks: 0,
            level: 1,
            experience: 0,
            currentEra: 1,
            organelles: [],
            achievements: [],
            createdAt: new Date(),
            lastActive: new Date()
        });
    }
    return players.get(userId);
}

// API Routes
app.get('/api/player/:userId', (req, res) => {
    try {
        const player = getPlayer(req.params.userId);
        player.lastActive = new Date();
        res.json(player);
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞' });
    }
});

app.post('/api/evolve', (req, res) => {
    try {
        const { userId } = req.body;
        const player = getPlayer(userId);
        
        player.dna += 1;
        player.totalClicks += 1;
        player.experience += 1;
        
        if (player.experience >= player.level * 100) {
            player.level += 1;
        }
        
        res.json({
            success: true,
            dna: player.dna,
            totalClicks: player.totalClicks,
            level: player.level,
            experience: player.experience
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏' });
    }
});

app.post('/api/buy-organelle', (req, res) => {
    try {
        const { userId, organelleId } = req.body;
        const player = getPlayer(userId);
        const organelle = ORGANELLES.find(o => o.id === organelleId);
        
        if (!organelle) {
            return res.status(400).json({ error: '–û—Ä–≥–∞–Ω–µ–ª–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        if (player.dna < organelle.cost) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –î–ù–ö' });
        }
        
        player.dna -= organelle.cost;
        player.organelles.push({
            id: organelle.id,
            name: organelle.name,
            purchasedAt: new Date()
        });
        
        res.json({
            success: true,
            message: `–û—Ä–≥–∞–Ω–µ–ª–ª–∞ ${organelle.name} –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞`,
            remainingDNA: player.dna,
            organelles: player.organelles
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –æ—Ä–≥–∞–Ω–µ–ª–ª—ã' });
    }
});

app.post('/api/mutate', (req, res) => {
    try {
        const { userId } = req.body;
        const player = getPlayer(userId);
        
        if (player.dna < 1000) {
            return res.status(400).json({ error: '–ú–∏–Ω–∏–º—É–º 1000 –î–ù–ö –¥–ª—è –º—É—Ç–∞—Ü–∏–∏' });
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–º
        const traits = ['–ë—ã—Å—Ç—Ä—ã–π', '–°–∏–ª—å–Ω—ã–π', '–£–º–Ω—ã–π', '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π', '–ö—Ä—É–ø–Ω—ã–π'];
        const colors = ['–ö—Ä–∞—Å–Ω—ã–π', '–°–∏–Ω–∏–π', '–ó–µ–ª–µ–Ω—ã–π', '–ñ–µ–ª—Ç—ã–π', '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π'];
        const names = ['–ü—Ä–æ—Ç–æ—Ü–∏—Ç', '–ì–∏–ø–µ—Ä—Ü–∏—Ç', '–ú–µ–≥–∞—Ü–∏—Ç', '–£–ª—å—Ç—Ä–∞—Ü–∏—Ç', '–°—É–ø–µ—Ä—Ü–∏—Ç'];
        
        const organism = {
            id: Date.now() + Math.random(),
            name: names[Math.floor(Math.random() * names.length)],
            rarity: 'Common',
            era: player.currentEra,
            traits: {
                speed: traits[Math.floor(Math.random() * traits.length)],
                strength: traits[Math.floor(Math.random() * traits.length)],
                intelligence: traits[Math.floor(Math.random() * traits.length)],
                color: colors[Math.floor(Math.random() * colors.length)]
            },
            power: Math.floor(Math.random() * 500) + 100,
            createdAt: new Date(),
            generation: 1,
            parents: []
        };
        
        organisms.set(organism.id, organism);
        player.dna -= 1000;
        
        res.json({
            success: true,
            organism: organism,
            remainingDNA: player.dna
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –º—É—Ç–∞—Ü–∏–∏' });
    }
});

app.get('/api/eras', (req, res) => {
    res.json(ERAS);
});

app.get('/api/organelles', (req, res) => {
    res.json(ORGANELLES);
});

app.get('/api/nfts/:userId', (req, res) => {
    try {
        const userOrganisms = Array.from(organisms.values()).slice(0, 10);
        res.json(userOrganisms);
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NFT' });
    }
});

app.post('/api/exchange-dna', (req, res) => {
    try {
        const { userId, amount } = req.body;
        const player = getPlayer(userId);
        
        if (amount < 100) {
            return res.status(400).json({ error: '–ú–∏–Ω–∏–º—É–º 100 –î–ù–ö –¥–ª—è –æ–±–º–µ–Ω–∞' });
        }
        
        if (player.dna < amount) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –î–ù–ö' });
        }
        
        const tokens = Math.floor(amount / 100);
        player.dna -= amount;
        
        res.json({
            success: true,
            message: `–û–±–º–µ–Ω—è–Ω–æ ${amount} –î–ù–ö –Ω–∞ ${tokens} —Ç–æ–∫–µ–Ω–æ–≤`,
            tokensReceived: tokens,
            remainingDNA: player.dna
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞' });
    }
});

app.get('/api/leaderboard', (req, res) => {
    try {
        const playersArray = Array.from(players.values());
        
        const topClicks = playersArray
            .sort((a, b) => b.totalClicks - a.totalClicks)
            .slice(0, 10)
            .map((player, index) => ({
                rank: index + 1,
                userId: player.id,
                totalClicks: player.totalClicks,
                era: ERAS.find(e => e.id === player.currentEra)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            }));
        
        const topLevel = playersArray
            .sort((a, b) => b.level - a.level)
            .slice(0, 10)
            .map((player, index) => ({
                rank: index + 1,
                userId: player.id,
                level: player.level,
                experience: player.experience
            }));
        
        res.json({
            topClicks,
            topLevel,
            topNFTs: [],
            totalPlayers: players.size,
            totalEvolutions: Array.from(players.values()).reduce((sum, p) => sum + p.totalClicks, 0)
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞' });
    }
});

app.get('/health', (req, res) => {
    res.json({
        status: 'OK',
        game: 'EvoTap',
        timestamp: new Date().toISOString(),
        players: players.size,
        totalEvolutions: Array.from(players.values()).reduce((sum, p) => sum + p.totalClicks, 0)
    });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'frontend', 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`‚úÖ EvoTap –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –¥–ª—è –∏–≥—Ä—ã`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ EvoTap...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ EvoTap...');
    process.exit(0);
}); 