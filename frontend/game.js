/**
 * EvoTap - Evolution Clicker Frontend
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–∫–µ—Ä–∞
 */

class EvoTapGame {
    constructor() {
        this.userId = this.generateUserId();
        this.playerData = null;
        this.eras = [];
        this.organelles = [];
        this.gameLoopInterval = null;
        this.autoClickInterval = null;
        this.uiUpdateInterval = null;
        this.clickEffectId = 0;
        
        // Web3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        this.web3 = null;
        this.account = null;
        
        // –ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.selectedOrganisms = [];
        this.currentTab = 'clicks';
        
        // –ó–≤—É–∫–∏ (–∑–∞–≥–ª—É—à–∫–∏)
        this.sounds = {
            click: () => console.log('üîä Click sound'),
            achievement: () => console.log('üîä Achievement sound'),
            mutation: () => console.log('üîä Mutation sound'),
            buy: () => console.log('üîä Buy sound')
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        this.isLoading = false;
        this.loadingProgress = 0;
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
        this.elements = {};
    }

    generateUserId() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const stored = localStorage.getItem('evotap_user_id');
        if (stored) return stored;
        
        const newId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('evotap_user_id', newId);
        return newId;
    }

    async init() {
        console.log('üß¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EvoTap...');
        
        this.showLoading();
        
        try {
            // –ö—ç—à–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
            this.cacheElements();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.loadGameData();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ä—ã –∏ –æ—Ä–≥–∞–Ω–µ–ª–ª—ã
            await Promise.all([
                this.loadEras(),
                this.loadOrganelles()
            ]);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Web3 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            await this.initWeb3();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateUI();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —Ü–∏–∫–ª—ã
            this.startGameLoops();
            
            console.log('‚úÖ EvoTap —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã', 'error');
        } finally {
            this.hideLoading();
        }
    }

    cacheElements() {
        // –ö—ç—à–∏—Ä—É–µ–º —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã DOM
        this.elements = {
            dnaCount: document.getElementById('dna-count'),
            playerLevel: document.getElementById('player-level'),
            tokenBalance: document.getElementById('token-balance'),
            eraEmoji: document.getElementById('era-emoji'),
            eraName: document.getElementById('era-name'),
            eraDescription: document.getElementById('era-description'),
            eraMultiplier: document.getElementById('era-multiplier'),
            clickZone: document.getElementById('click-zone'),
            organism: document.getElementById('organism'),
            totalClicks: document.getElementById('total-clicks'),
            clicksPerSecond: document.getElementById('clicks-per-second'),
            organellesList: document.getElementById('organelles-list'),
            erasList: document.getElementById('eras-list'),
            organismsList: document.getElementById('organisms-list'),
            mutateBtn: document.getElementById('mutate-btn'),
            breedBtn: document.getElementById('breed-btn'),
            notifications: document.getElementById('notifications')
        };
    }

    async initWeb3() {
        try {
            if (typeof window.ethereum !== 'undefined') {
                this.web3 = new Web3(window.ethereum);
                console.log('‚úÖ Web3 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            } else {
                console.log('‚ÑπÔ∏è Web3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Web3:', error.message);
        }
    }

    async connectWallet() {
        if (!this.web3) {
            this.showNotification('Web3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'warning');
            return false;
        }

        try {
            const accounts = await window.ethereum.request({
                method: 'eth_requestAccounts'
            });
            this.account = accounts[0];
            this.showNotification('–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω!', 'success');
            return true;
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞', 'error');
            return false;
        }
    }

    async loadGameData() {
        try {
            const response = await fetch(`/api/player/${this.userId}`);
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞');
            
            this.playerData = await response.json();
            console.log('üìä –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.playerData);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', error);
            throw error;
        }
    }

    async loadEras() {
        try {
            const response = await fetch('/api/eras');
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ä');
            
            this.eras = await response.json();
            console.log('üåç –≠—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.eras.length);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ä:', error);
            throw error;
        }
    }

    async loadOrganelles() {
        try {
            const response = await fetch('/api/organelles');
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–≥–∞–Ω–µ–ª–ª');
            
            this.organelles = await response.json();
            console.log('üî¨ –û—Ä–≥–∞–Ω–µ–ª–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.organelles.length);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–≥–∞–Ω–µ–ª–ª:', error);
            throw error;
        }
    }

    setupEventListeners() {
        // –ö–ª–∏–∫ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–º—É
        this.elements.clickZone.addEventListener('click', (e) => this.handleClick(e));
        
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        this.elements.mutateBtn.addEventListener('click', () => this.handleMutation());
        this.elements.breedBtn.addEventListener('click', () => this.openBreedingModal());
        
        // –ö–Ω–æ–ø–∫–∏ —Ñ—É—Ç–µ—Ä–∞
        document.getElementById('exchange-btn').addEventListener('click', () => this.openExchangeModal());
        document.getElementById('leaderboard-btn').addEventListener('click', () => this.openLeaderboardModal());
        document.getElementById('achievements-btn').addEventListener('click', () => this.openAchievementsModal());
        
        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        document.querySelectorAll('.modal-close').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.target.closest('.modal').classList.remove('show');
            });
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö –æ–±–ª–∞—Å—Ç–∏
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.remove('show');
                }
            });
        });
        
        // –û–±–º–µ–Ω –î–ù–ö
        document.getElementById('dna-amount').addEventListener('input', (e) => {
            const amount = parseInt(e.target.value) || 0;
            const tokens = Math.floor(amount / 100);
            document.getElementById('tokens-preview').textContent = tokens;
        });
        
        document.getElementById('confirm-exchange').addEventListener('click', () => this.handleExchange());
        
        // –õ–∏–¥–µ—Ä–±–æ—Ä–¥ —Ç–∞–±—ã
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const tab = e.target.dataset.tab;
                this.switchLeaderboardTab(tab);
            });
        });
        
        // –°–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ
        document.getElementById('confirm-breeding').addEventListener('click', () => this.handleBreeding());
        
        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space') {
                e.preventDefault();
                this.handleClick({ clientX: window.innerWidth / 2, clientY: window.innerHeight / 2 });
            }
        });
    }

    async handleClick(event) {
        if (this.isLoading) return;
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch('/api/evolve', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId: this.userId, clicks: 1 })
            });
            
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞');
            
            const result = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            this.playerData = result.player;
            
            // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
            this.createClickEffect(event);
            
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
            this.sounds.click();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if (result.newAchievements && result.newAchievements.length > 0) {
                result.newAchievements.forEach(achievement => {
                    this.showNotification(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.name}!`, 'success');
                    this.sounds.achievement();
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateUI();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞', 'error');
        }
    }

    createClickEffect(event) {
        const effect = document.createElement('div');
        effect.className = 'click-effect';
        effect.textContent = '+' + Math.floor(Math.random() * 10 + 1);
        effect.id = 'effect-' + (++this.clickEffectId);
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç
        const rect = this.elements.clickZone.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        effect.style.left = x + 'px';
        effect.style.top = y + 'px';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        document.getElementById('click-effects').appendChild(effect);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            const el = document.getElementById(effect.id);
            if (el) el.remove();
        }, 2000);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞
        this.elements.organism.style.transform = 'scale(1.1)';
        setTimeout(() => {
            this.elements.organism.style.transform = 'scale(1)';
        }, 100);
    }

    async handleMutation() {
        if (this.isLoading) return;
        
        const cost = 1000 * Math.pow(2, this.playerData.organisms.length);
        
        if (this.playerData.dna < cost) {
            this.showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –î–ù–ö! –ù—É–∂–Ω–æ: ${cost}`, 'warning');
            return;
        }
        
        try {
            this.isLoading = true;
            this.elements.mutateBtn.disabled = true;
            this.elements.mutateBtn.textContent = 'üß™ –ú—É—Ç–∞—Ü–∏—è...';
            
            const response = await fetch('/api/mutate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId: this.userId })
            });
            
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –º—É—Ç–∞—Ü–∏–∏');
            
            const result = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            this.playerData.dna = result.remainingDNA;
            this.playerData.organisms.push(result.organism);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º—É—Ç–∞—Ü–∏–∏
            this.showMutationResult(result.organism);
            
            // –ó–≤—É–∫ –º—É—Ç–∞—Ü–∏–∏
            this.sounds.mutation();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateUI();
            
            this.showNotification(`üß¨ –°–æ–∑–¥–∞–Ω –æ—Ä–≥–∞–Ω–∏–∑–º: ${result.organism.name}!`, 'success');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –º—É—Ç–∞—Ü–∏–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –º—É—Ç–∞—Ü–∏–∏', 'error');
        } finally {
            this.isLoading = false;
            this.updateButtonStates();
        }
    }

    showMutationResult(organism) {
        const modal = document.getElementById('mutation-modal');
        const container = document.getElementById('new-organism');
        
        container.innerHTML = `
            <div class="organism-card rarity-${organism.rarity}">
                <div class="organism-header">
                    <h4 class="organism-name">${organism.name}</h4>
                    <span class="organism-rarity rarity-${organism.rarity}">${organism.rarity}</span>
                </div>
                <div class="organism-traits">
                    ${Object.entries(organism.traits).map(([key, value]) => 
                        `<div class="trait"><strong>${key}:</strong> ${value}</div>`
                    ).join('')}
                </div>
                <div class="organism-stats">
                    <div>–°–∏–ª–∞: ${organism.power}</div>
                    <div>–≠—Ä–∞: ${organism.era}</div>
                    <div>–ü–æ–∫–æ–ª–µ–Ω–∏–µ: ${organism.generation}</div>
                </div>
            </div>
        `;
        
        modal.classList.add('show');
    }

    openBreedingModal() {
        if (this.playerData.organisms.length < 2) {
            this.showNotification('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –¥–ª—è —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è', 'warning');
            return;
        }
        
        if (this.playerData.dna < 5000) {
            this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –î–ù–ö! –ù—É–∂–Ω–æ: 5000', 'warning');
            return;
        }
        
        const modal = document.getElementById('breeding-modal');
        const container = document.getElementById('breeding-organisms');
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤
        container.innerHTML = this.playerData.organisms.map(organism => `
            <div class="organism-card breeding-organism" data-id="${organism.id}">
                <div class="organism-header">
                    <h5>${organism.name}</h5>
                    <span class="organism-rarity rarity-${organism.rarity}">${organism.rarity}</span>
                </div>
                <div class="organism-power">–°–∏–ª–∞: ${organism.power}</div>
            </div>
        `).join('');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤
        container.querySelectorAll('.breeding-organism').forEach(card => {
            card.addEventListener('click', () => {
                if (card.classList.contains('selected')) {
                    card.classList.remove('selected');
                    this.selectedOrganisms = this.selectedOrganisms.filter(id => id !== card.dataset.id);
                } else if (this.selectedOrganisms.length < 2) {
                    card.classList.add('selected');
                    this.selectedOrganisms.push(card.dataset.id);
                }
                
                document.getElementById('confirm-breeding').disabled = this.selectedOrganisms.length !== 2;
            });
        });
        
        modal.classList.add('show');
    }

    async handleBreeding() {
        if (this.selectedOrganisms.length !== 2) return;
        
        try {
            const response = await fetch('/api/breed', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    userId: this.userId,
                    organism1Id: this.selectedOrganisms[0],
                    organism2Id: this.selectedOrganisms[1]
                })
            });
            
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è');
            
            const result = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            this.playerData.dna = result.remainingDNA;
            this.playerData.organisms.push(result.hybrid);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
            document.getElementById('breeding-modal').classList.remove('show');
            this.selectedOrganisms = [];
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.showMutationResult(result.hybrid);
            
            this.showNotification(`üî¨ –°–æ–∑–¥–∞–Ω –≥–∏–±—Ä–∏–¥: ${result.hybrid.name}!`, 'success');
            this.updateUI();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è', 'error');
        }
    }

    openExchangeModal() {
        document.getElementById('exchange-modal').classList.add('show');
    }

    async handleExchange() {
        const amount = parseInt(document.getElementById('dna-amount').value);
        
        if (!amount || amount < 100) {
            this.showNotification('–ú–∏–Ω–∏–º—É–º 100 –î–ù–ö –¥–ª—è –æ–±–º–µ–Ω–∞', 'warning');
            return;
        }
        
        if (amount > this.playerData.dna) {
            this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –î–ù–ö', 'warning');
            return;
        }
        
        try {
            const response = await fetch('/api/exchange-dna', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId: this.userId, dnaAmount: amount })
            });
            
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error);
            }
            
            const result = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            this.playerData.dna = result.remainingDNA;
            if (this.playerData.tokenBalance !== undefined) {
                this.playerData.tokenBalance += result.tokensReceived;
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
            document.getElementById('exchange-modal').classList.remove('show');
            document.getElementById('dna-amount').value = '';
            document.getElementById('tokens-preview').textContent = '0';
            
            this.showNotification(`üí∞ –ü–æ–ª—É—á–µ–Ω–æ ${result.tokensReceived} $DNA —Ç–æ–∫–µ–Ω–æ–≤!`, 'success');
            this.updateUI();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞:', error);
            this.showNotification(error.message, 'error');
        }
    }

    async openLeaderboardModal() {
        const modal = document.getElementById('leaderboard-modal');
        modal.classList.add('show');
        await this.loadLeaderboard();
    }

    async loadLeaderboard(type = 'clicks') {
        try {
            const response = await fetch('/api/leaderboard');
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞');
            
            const data = await response.json();
            const container = document.getElementById('leaderboard-content');
            
            let content = '';
            
            if (type === 'clicks') {
                content = data.topClicks.map((player, index) => `
                    <div class="leaderboard-item">
                        <span class="rank">#${player.rank}</span>
                        <span class="player-name">${player.id}</span>
                        <span class="player-score">${player.totalClicks} —ç–≤–æ–ª—é—Ü–∏–π</span>
                    </div>
                `).join('');
            } else if (type === 'level') {
                content = data.topLevel.map((player, index) => `
                    <div class="leaderboard-item">
                        <span class="rank">#${player.rank}</span>
                        <span class="player-name">${player.id}</span>
                        <span class="player-score">–£—Ä–æ–≤–µ–Ω—å ${player.level}</span>
                    </div>
                `).join('');
            } else if (type === 'nfts') {
                content = data.topNFTs.map((player, index) => `
                    <div class="leaderboard-item">
                        <span class="rank">#${player.rank}</span>
                        <span class="player-name">${player.id}</span>
                        <span class="player-score">${player.nfts} NFT</span>
                    </div>
                `).join('');
            }
            
            container.innerHTML = content;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.tab === type);
            });
            
            this.currentTab = type;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞', 'error');
        }
    }

    switchLeaderboardTab(type) {
        this.loadLeaderboard(type);
    }

    openAchievementsModal() {
        document.getElementById('achievements-modal').classList.add('show');
        this.loadAchievements();
    }

    loadAchievements() {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        const achievements = [
            { id: 1, name: "–ü–µ—Ä–≤–∞—è –∫–ª–µ—Ç–∫–∞", requirement: 1, type: "clicks", earned: true },
            { id: 2, name: "–î–µ–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏", requirement: 10, type: "clicks", earned: true },
            { id: 3, name: "–ö–æ–ª–æ–Ω–∏—è", requirement: 100, type: "clicks", earned: false },
            { id: 4, name: "–ú–Ω–æ–≥–æ–∫–ª–µ—Ç–æ—á–Ω–æ—Å—Ç—å", requirement: 1000, type: "clicks", earned: false }
        ];
        
        const container = document.getElementById('achievements-list');
        
        container.innerHTML = achievements.map(achievement => `
            <div class="achievement-item ${achievement.earned ? 'earned' : 'locked'}">
                <div class="achievement-name">${achievement.name}</div>
                <div class="achievement-requirement">
                    ${achievement.type === 'clicks' ? `${achievement.requirement} –∫–ª–∏–∫–æ–≤` : achievement.requirement}
                </div>
                <div class="achievement-status">
                    ${achievement.earned ? '‚úÖ –ü–æ–ª—É—á–µ–Ω–æ' : 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'}
                </div>
            </div>
        `).join('');
    }

    async buyOrganelle(organelleId) {
        if (this.isLoading) return;
        
        const organelle = this.organelles.find(o => o.id === organelleId);
        if (!organelle) return;
        
        if (this.playerData.dna < organelle.cost) {
            this.showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –î–ù–ö! –ù—É–∂–Ω–æ: ${organelle.cost}`, 'warning');
            return;
        }
        
        if (this.playerData.organelles.includes(organelleId)) {
            this.showNotification('–û—Ä–≥–∞–Ω–µ–ª–ª–∞ —É–∂–µ –∫—É–ø–ª–µ–Ω–∞!', 'warning');
            return;
        }
        
        try {
            const response = await fetch('/api/buy-organelle', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId: this.userId, organelleId })
            });
            
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error);
            }
            
            const result = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            this.playerData.dna = result.remainingDNA;
            this.playerData.organelles.push(organelleId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
            if (organelle.passive) {
                this.playerData.passiveIncome = (this.playerData.passiveIncome || 0) + organelle.passive;
            }
            
            this.sounds.buy();
            this.showNotification(`üî¨ –ö—É–ø–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–µ–ª–ª–∞: ${organelle.name}!`, 'success');
            this.updateUI();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –æ—Ä–≥–∞–Ω–µ–ª–ª—ã:', error);
            this.showNotification(error.message, 'error');
        }
    }

    async unlockEra(eraId) {
        if (this.isLoading) return;
        
        const era = this.eras.find(e => e.id === eraId);
        if (!era) return;
        
        if (this.playerData.dna < era.unlockCost) {
            this.showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –î–ù–ö! –ù—É–∂–Ω–æ: ${era.unlockCost}`, 'warning');
            return;
        }
        
        if (this.playerData.unlockedEras.includes(eraId)) {
            this.showNotification('–≠—Ä–∞ —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!', 'warning');
            return;
        }
        
        try {
            const response = await fetch('/api/unlock-era', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId: this.userId, eraId })
            });
            
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error);
            }
            
            const result = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            this.playerData.dna = result.remainingDNA;
            this.playerData.unlockedEras.push(eraId);
            this.playerData.currentEra = eraId;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if (result.newAchievements && result.newAchievements.length > 0) {
                result.newAchievements.forEach(achievement => {
                    this.showNotification(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.name}!`, 'success');
                });
            }
            
            this.sounds.buy();
            this.showNotification(`üåç –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —ç—Ä–∞: ${era.name}!`, 'success');
            this.updateUI();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç—Ä—ã:', error);
            this.showNotification(error.message, 'error');
        }
    }

    updateUI() {
        if (!this.playerData) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        this.elements.dnaCount.textContent = this.formatNumber(this.playerData.dna);
        this.elements.playerLevel.textContent = this.playerData.level;
        this.elements.tokenBalance.textContent = this.playerData.tokenBalance || 0;
        this.elements.totalClicks.textContent = this.formatNumber(this.playerData.totalClicks);
        this.elements.clicksPerSecond.textContent = this.formatNumber(this.playerData.clicksPerSecond || 0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ä–µ
        const currentEra = this.eras.find(era => era.id === this.playerData.currentEra);
        if (currentEra) {
            this.elements.eraEmoji.textContent = currentEra.emoji;
            this.elements.eraName.textContent = currentEra.name;
            this.elements.eraDescription.textContent = currentEra.description;
            this.elements.eraMultiplier.textContent = `x${currentEra.multiplier}`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
        this.updateOrganellesList();
        this.updateErasList();
        this.updateOrganismsList();
        this.updateButtonStates();
    }

    updateOrganellesList() {
        if (!this.organelles.length || !this.playerData) return;
        
        this.elements.organellesList.innerHTML = this.organelles.map(organelle => {
            const owned = this.playerData.organelles.includes(organelle.id);
            const canAfford = this.playerData.dna >= organelle.cost;
            
            return `
                <div class="upgrade-item ${owned ? 'owned' : ''}" 
                     onclick="${owned ? '' : `game.buyOrganelle(${organelle.id})`}">
                    <div class="upgrade-info">
                        <div class="upgrade-name">${organelle.emoji} ${organelle.name}</div>
                        <div class="upgrade-effect">${organelle.effect}</div>
                        <div class="upgrade-cost">
                            ${owned ? '‚úÖ –ö—É–ø–ª–µ–Ω–æ' : 
                              canAfford ? `üí∞ ${organelle.cost} –î–ù–ö` : 
                              `üîí ${organelle.cost} –î–ù–ö`}
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    updateErasList() {
        if (!this.eras.length || !this.playerData) return;
        
        this.elements.erasList.innerHTML = this.eras.map(era => {
            const unlocked = this.playerData.unlockedEras.includes(era.id);
            const current = this.playerData.currentEra === era.id;
            const canAfford = this.playerData.dna >= era.unlockCost;
            
            return `
                <div class="era-item ${current ? 'current' : ''} ${!unlocked ? 'locked' : ''}"
                     onclick="${unlocked || era.unlockCost === 0 ? '' : `game.unlockEra(${era.id})`}">
                    <div class="era-header">
                        <span>${era.emoji} ${era.name}</span>
                        <span>x${era.multiplier}</span>
                    </div>
                    <div class="era-desc">${era.description}</div>
                    <div class="era-unlock-cost">
                        ${unlocked ? (current ? 'üåü –¢–µ–∫—É—â–∞—è' : '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞') :
                          era.unlockCost === 0 ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' :
                          canAfford ? `üí∞ ${era.unlockCost} –î–ù–ö` :
                          `üîí ${era.unlockCost} –î–ù–ö`}
                    </div>
                </div>
            `;
        }).join('');
    }

    updateOrganismsList() {
        if (!this.playerData.organisms) return;
        
        this.elements.organismsList.innerHTML = this.playerData.organisms.map(organism => `
            <div class="organism-card rarity-${organism.rarity}">
                <div class="organism-header">
                    <h5 class="organism-name">${organism.name}</h5>
                    <span class="organism-rarity rarity-${organism.rarity}">${organism.rarity}</span>
                </div>
                <div class="organism-traits">
                    ${Object.entries(organism.traits).map(([key, value]) => 
                        `<div class="trait"><strong>${key}:</strong> ${value}</div>`
                    ).join('')}
                </div>
                <div class="organism-power">–°–∏–ª–∞: ${organism.power}</div>
            </div>
        `).join('') || '<div style="text-align: center; color: #666;">–û—Ä–≥–∞–Ω–∏–∑–º—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –º—É—Ç–∞—Ü–∏–π</div>';
    }

    updateButtonStates() {
        if (!this.playerData) return;
        
        // –ö–Ω–æ–ø–∫–∞ –º—É—Ç–∞—Ü–∏–∏
        const mutationCost = 1000 * Math.pow(2, this.playerData.organisms.length);
        const canMutate = this.playerData.dna >= mutationCost && !this.isLoading;
        
        this.elements.mutateBtn.disabled = !canMutate;
        this.elements.mutateBtn.textContent = `üß™ –ú—É—Ç–∞—Ü–∏—è (${mutationCost} –î–ù–ö)`;
        
        // –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è
        const canBreed = this.playerData.organisms.length >= 2 && this.playerData.dna >= 5000 && !this.isLoading;
        this.elements.breedBtn.disabled = !canBreed;
    }

    startGameLoops() {
        // –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI)
        this.uiUpdateInterval = setInterval(() => {
            if (this.playerData) {
                this.updateUI();
            }
        }, 1000);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–∏–∫–∏ –æ—Ç –æ—Ä–≥–∞–Ω–µ–ª–ª
        this.autoClickInterval = setInterval(() => {
            if (this.playerData && this.playerData.organelles) {
                let autoClicks = 0;
                this.playerData.organelles.forEach(organelleId => {
                    const organelle = this.organelles.find(o => o.id === organelleId);
                    if (organelle && organelle.autoClick) {
                        autoClicks += organelle.autoClick;
                    }
                });
                
                if (autoClicks > 0) {
                    this.handleClick({ clientX: 0, clientY: 0 });
                }
            }
        }, 2000);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        this.gameLoopInterval = setInterval(() => {
            this.saveGameState();
        }, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }

    formatNumber(num) {
        if (num >= 1e9) return (num / 1e9).toFixed(1) + 'B';
        if (num >= 1e6) return (num / 1e6).toFixed(1) + 'M';
        if (num >= 1e3) return (num / 1e3).toFixed(1) + 'K';
        return Math.floor(num).toString();
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        this.elements.notifications.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 3000);
    }

    showLoading() {
        document.getElementById('loading-screen').classList.remove('hidden');
    }

    hideLoading() {
        document.getElementById('loading-screen').classList.add('hidden');
    }

    saveGameState() {
        if (this.playerData) {
            localStorage.setItem('evotap_game_state', JSON.stringify({
                userId: this.userId,
                lastSave: Date.now(),
                playerData: this.playerData
            }));
        }
    }

    destroy() {
        // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        if (this.gameLoopInterval) clearInterval(this.gameLoopInterval);
        if (this.autoClickInterval) clearInterval(this.autoClickInterval);
        if (this.uiUpdateInterval) clearInterval(this.uiUpdateInterval);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.saveGameState();
        
        console.log('üß¨ EvoTap –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–µ
let game;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    game = new EvoTapGame();
    game.init().catch(console.error);
});

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (game) game.destroy();
}); 